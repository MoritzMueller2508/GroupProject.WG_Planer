type WG {
  id: ID!
  name: String!
  address: String!
  city: String!
  plz: String!
  shoppingList(itemNameValue: ModelShoppingListWgShopListCompositeKeyConditionInput, filter: ModelShoppingListFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelShoppingListConnection
  householdDevices(deviceNameValue: ModelHouseholdDevicesWgDevicesCompositeKeyConditionInput, filter: ModelHouseholdDevicesFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelHouseholdDevicesConnection
  news(titleText: ModelNewsWgNewsCompositeKeyConditionInput, filter: ModelNewsFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelNewsConnection
  calender(eventsDateTime: ModelCalendarWgCalendarCompositeKeyConditionInput, filter: ModelCalendarFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCalendarConnection
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type ShoppingList {
  id: ID!
  wgID: ID!
  itemName: String!
  value: String
  wg: WG
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type HouseholdDevices {
  id: ID!
  wgID: ID!
  deviceName: String!
  value: String
  wg: WG
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type News {
  id: ID!
  wgID: ID!
  title: String!
  text: String
  wg: WG
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Calendar {
  id: ID!
  wgID: ID!
  events: String!
  date: AWSDate!
  time: AWSTime!
  wg: WG
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelWGConnection {
  items: [WG]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelWGFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  address: ModelStringInput
  city: ModelStringInput
  plz: ModelStringInput
  and: [ModelWGFilterInput]
  or: [ModelWGFilterInput]
  not: ModelWGFilterInput
}

type Query {
  syncWGS(filter: ModelWGFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelWGConnection
  getWG(id: ID!): WG
  listWGs(filter: ModelWGFilterInput, limit: Int, nextToken: String): ModelWGConnection
  syncShoppingLists(filter: ModelShoppingListFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelShoppingListConnection
  getShoppingList(id: ID!): ShoppingList
  listShoppingLists(filter: ModelShoppingListFilterInput, limit: Int, nextToken: String): ModelShoppingListConnection
  syncHouseholdDevices(filter: ModelHouseholdDevicesFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelHouseholdDevicesConnection
  getHouseholdDevices(id: ID!): HouseholdDevices
  listHouseholdDevicess(filter: ModelHouseholdDevicesFilterInput, limit: Int, nextToken: String): ModelHouseholdDevicesConnection
  syncNews(filter: ModelNewsFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelNewsConnection
  getNews(id: ID!): News
  listNewss(filter: ModelNewsFilterInput, limit: Int, nextToken: String): ModelNewsConnection
  syncCalendars(filter: ModelCalendarFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelCalendarConnection
  getCalendar(id: ID!): Calendar
  listCalendars(filter: ModelCalendarFilterInput, limit: Int, nextToken: String): ModelCalendarConnection
}

input CreateWGInput {
  id: ID
  name: String!
  address: String!
  city: String!
  plz: String!
  _version: Int
}

input UpdateWGInput {
  id: ID!
  name: String
  address: String
  city: String
  plz: String
  _version: Int
}

input DeleteWGInput {
  id: ID
  _version: Int
}

type Mutation {
  createWG(input: CreateWGInput!, condition: ModelWGConditionInput): WG
  updateWG(input: UpdateWGInput!, condition: ModelWGConditionInput): WG
  deleteWG(input: DeleteWGInput!, condition: ModelWGConditionInput): WG
  createShoppingList(input: CreateShoppingListInput!, condition: ModelShoppingListConditionInput): ShoppingList
  updateShoppingList(input: UpdateShoppingListInput!, condition: ModelShoppingListConditionInput): ShoppingList
  deleteShoppingList(input: DeleteShoppingListInput!, condition: ModelShoppingListConditionInput): ShoppingList
  createHouseholdDevices(input: CreateHouseholdDevicesInput!, condition: ModelHouseholdDevicesConditionInput): HouseholdDevices
  updateHouseholdDevices(input: UpdateHouseholdDevicesInput!, condition: ModelHouseholdDevicesConditionInput): HouseholdDevices
  deleteHouseholdDevices(input: DeleteHouseholdDevicesInput!, condition: ModelHouseholdDevicesConditionInput): HouseholdDevices
  createNews(input: CreateNewsInput!, condition: ModelNewsConditionInput): News
  updateNews(input: UpdateNewsInput!, condition: ModelNewsConditionInput): News
  deleteNews(input: DeleteNewsInput!, condition: ModelNewsConditionInput): News
  createCalendar(input: CreateCalendarInput!, condition: ModelCalendarConditionInput): Calendar
  updateCalendar(input: UpdateCalendarInput!, condition: ModelCalendarConditionInput): Calendar
  deleteCalendar(input: DeleteCalendarInput!, condition: ModelCalendarConditionInput): Calendar
}

input ModelWGConditionInput {
  name: ModelStringInput
  address: ModelStringInput
  city: ModelStringInput
  plz: ModelStringInput
  and: [ModelWGConditionInput]
  or: [ModelWGConditionInput]
  not: ModelWGConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Subscription {
  onCreateWG: WG @aws_subscribe(mutations: ["createWG"])
  onUpdateWG: WG @aws_subscribe(mutations: ["updateWG"])
  onDeleteWG: WG @aws_subscribe(mutations: ["deleteWG"])
  onCreateShoppingList: ShoppingList @aws_subscribe(mutations: ["createShoppingList"])
  onUpdateShoppingList: ShoppingList @aws_subscribe(mutations: ["updateShoppingList"])
  onDeleteShoppingList: ShoppingList @aws_subscribe(mutations: ["deleteShoppingList"])
  onCreateHouseholdDevices: HouseholdDevices @aws_subscribe(mutations: ["createHouseholdDevices"])
  onUpdateHouseholdDevices: HouseholdDevices @aws_subscribe(mutations: ["updateHouseholdDevices"])
  onDeleteHouseholdDevices: HouseholdDevices @aws_subscribe(mutations: ["deleteHouseholdDevices"])
  onCreateNews: News @aws_subscribe(mutations: ["createNews"])
  onUpdateNews: News @aws_subscribe(mutations: ["updateNews"])
  onDeleteNews: News @aws_subscribe(mutations: ["deleteNews"])
  onCreateCalendar: Calendar @aws_subscribe(mutations: ["createCalendar"])
  onUpdateCalendar: Calendar @aws_subscribe(mutations: ["updateCalendar"])
  onDeleteCalendar: Calendar @aws_subscribe(mutations: ["deleteCalendar"])
}

input WGInput {
  id: ID!
  name: String!
  address: String!
  city: String!
  plz: String!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type ModelShoppingListConnection {
  items: [ShoppingList]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelShoppingListFilterInput {
  id: ModelIDInput
  wgID: ModelIDInput
  itemName: ModelStringInput
  value: ModelStringInput
  and: [ModelShoppingListFilterInput]
  or: [ModelShoppingListFilterInput]
  not: ModelShoppingListFilterInput
}

input CreateShoppingListInput {
  id: ID
  wgID: ID!
  itemName: String!
  value: String
  wg: WGInput
  _version: Int
}

input UpdateShoppingListInput {
  id: ID!
  wgID: ID
  itemName: String
  value: String
  wg: WGInput
  _version: Int
}

input DeleteShoppingListInput {
  id: ID
  _version: Int
}

input ModelShoppingListConditionInput {
  wgID: ModelIDInput
  itemName: ModelStringInput
  value: ModelStringInput
  and: [ModelShoppingListConditionInput]
  or: [ModelShoppingListConditionInput]
  not: ModelShoppingListConditionInput
}

input ShoppingListInput {
  id: ID!
  wgID: ID!
  itemName: String!
  value: String
  wg: WGInput
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type ModelHouseholdDevicesConnection {
  items: [HouseholdDevices]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelHouseholdDevicesFilterInput {
  id: ModelIDInput
  wgID: ModelIDInput
  deviceName: ModelStringInput
  value: ModelStringInput
  and: [ModelHouseholdDevicesFilterInput]
  or: [ModelHouseholdDevicesFilterInput]
  not: ModelHouseholdDevicesFilterInput
}

input CreateHouseholdDevicesInput {
  id: ID
  wgID: ID!
  deviceName: String!
  value: String
  wg: WGInput
  _version: Int
}

input UpdateHouseholdDevicesInput {
  id: ID!
  wgID: ID
  deviceName: String
  value: String
  wg: WGInput
  _version: Int
}

input DeleteHouseholdDevicesInput {
  id: ID
  _version: Int
}

input ModelHouseholdDevicesConditionInput {
  wgID: ModelIDInput
  deviceName: ModelStringInput
  value: ModelStringInput
  and: [ModelHouseholdDevicesConditionInput]
  or: [ModelHouseholdDevicesConditionInput]
  not: ModelHouseholdDevicesConditionInput
}

input HouseholdDevicesInput {
  id: ID!
  wgID: ID!
  deviceName: String!
  value: String
  wg: WGInput
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type ModelNewsConnection {
  items: [News]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelNewsFilterInput {
  id: ModelIDInput
  wgID: ModelIDInput
  title: ModelStringInput
  text: ModelStringInput
  and: [ModelNewsFilterInput]
  or: [ModelNewsFilterInput]
  not: ModelNewsFilterInput
}

input CreateNewsInput {
  id: ID
  wgID: ID!
  title: String!
  text: String
  wg: WGInput
  _version: Int
}

input UpdateNewsInput {
  id: ID!
  wgID: ID
  title: String
  text: String
  wg: WGInput
  _version: Int
}

input DeleteNewsInput {
  id: ID
  _version: Int
}

input ModelNewsConditionInput {
  wgID: ModelIDInput
  title: ModelStringInput
  text: ModelStringInput
  and: [ModelNewsConditionInput]
  or: [ModelNewsConditionInput]
  not: ModelNewsConditionInput
}

input NewsInput {
  id: ID!
  wgID: ID!
  title: String!
  text: String
  wg: WGInput
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type ModelCalendarConnection {
  items: [Calendar]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelCalendarFilterInput {
  id: ModelIDInput
  wgID: ModelIDInput
  events: ModelStringInput
  date: ModelStringInput
  time: ModelStringInput
  and: [ModelCalendarFilterInput]
  or: [ModelCalendarFilterInput]
  not: ModelCalendarFilterInput
}

input CreateCalendarInput {
  id: ID
  wgID: ID!
  events: String!
  date: AWSDate!
  time: AWSTime!
  wg: WGInput
  _version: Int
}

input UpdateCalendarInput {
  id: ID!
  wgID: ID
  events: String
  date: AWSDate
  time: AWSTime
  wg: WGInput
  _version: Int
}

input DeleteCalendarInput {
  id: ID
  _version: Int
}

input ModelCalendarConditionInput {
  wgID: ModelIDInput
  events: ModelStringInput
  date: ModelStringInput
  time: ModelStringInput
  and: [ModelCalendarConditionInput]
  or: [ModelCalendarConditionInput]
  not: ModelCalendarConditionInput
}

input ModelShoppingListWgShopListCompositeKeyConditionInput {
  eq: ModelShoppingListWgShopListCompositeKeyInput
  le: ModelShoppingListWgShopListCompositeKeyInput
  lt: ModelShoppingListWgShopListCompositeKeyInput
  ge: ModelShoppingListWgShopListCompositeKeyInput
  gt: ModelShoppingListWgShopListCompositeKeyInput
  between: [ModelShoppingListWgShopListCompositeKeyInput]
  beginsWith: ModelShoppingListWgShopListCompositeKeyInput
}

input ModelShoppingListWgShopListCompositeKeyInput {
  itemName: String
  value: String
}

input ModelHouseholdDevicesWgDevicesCompositeKeyConditionInput {
  eq: ModelHouseholdDevicesWgDevicesCompositeKeyInput
  le: ModelHouseholdDevicesWgDevicesCompositeKeyInput
  lt: ModelHouseholdDevicesWgDevicesCompositeKeyInput
  ge: ModelHouseholdDevicesWgDevicesCompositeKeyInput
  gt: ModelHouseholdDevicesWgDevicesCompositeKeyInput
  between: [ModelHouseholdDevicesWgDevicesCompositeKeyInput]
  beginsWith: ModelHouseholdDevicesWgDevicesCompositeKeyInput
}

input ModelHouseholdDevicesWgDevicesCompositeKeyInput {
  deviceName: String
  value: String
}

input ModelNewsWgNewsCompositeKeyConditionInput {
  eq: ModelNewsWgNewsCompositeKeyInput
  le: ModelNewsWgNewsCompositeKeyInput
  lt: ModelNewsWgNewsCompositeKeyInput
  ge: ModelNewsWgNewsCompositeKeyInput
  gt: ModelNewsWgNewsCompositeKeyInput
  between: [ModelNewsWgNewsCompositeKeyInput]
  beginsWith: ModelNewsWgNewsCompositeKeyInput
}

input ModelNewsWgNewsCompositeKeyInput {
  title: String
  text: String
}

input ModelCalendarWgCalendarCompositeKeyConditionInput {
  eq: ModelCalendarWgCalendarCompositeKeyInput
  le: ModelCalendarWgCalendarCompositeKeyInput
  lt: ModelCalendarWgCalendarCompositeKeyInput
  ge: ModelCalendarWgCalendarCompositeKeyInput
  gt: ModelCalendarWgCalendarCompositeKeyInput
  between: [ModelCalendarWgCalendarCompositeKeyInput]
  beginsWith: ModelCalendarWgCalendarCompositeKeyInput
}

input ModelCalendarWgCalendarCompositeKeyInput {
  events: String
  date: AWSDate
  time: String
}
